import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

data_url = "http://bit.ly/w-data"
data = pd.read_csv(data_url)

print("Data imported successfully")

print(data.head(10))

X = data['Hours'].values.reshape(-1, 1)
y = data['Scores'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

model = LinearRegression()
model.fit(X_train, y_train)
print("Training complete.")

hours = 9.25
predicted_score = model.predict([[hours]])
print(f"Predicted score for studying {hours} hours per day: {predicted_score[0]}")

# R-squared value
r2_score = model.score(X_test, y_test)
print(f"R-squared value: {r2_score}")

# Plotting the regression line
plt.scatter(X, y)
plt.plot(X, model.predict(X), color='blue')
plt.title('Hours vs Scores')
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.show()

print(X_test)  # Testing data - In Hours
y_pred = model.predict(X_test)  # Predicting the scores

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
print(df)

# You can also test with your own data
hours = 9.25
own_pred = model.predict([[hours]])
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))


from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(y_test, y_pred)) 
